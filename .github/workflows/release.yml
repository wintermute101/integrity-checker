name: Release

on:
  push:
    branches:
      - main
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

env:
  CARGO_TERM_COLOR: always

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: "create_release"
        id: create_release
        uses: "actions/github-script@v6"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          tag_name: "${{ github.ref_name }}"
          script: |
            try {
              const in_tag_name = core.getInput('tag_name', { required: true })
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: in_tag_name,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: in_tag_name,
              });

              core.setOutput('release_id', response.data.id);
              core.setOutput('upload_url', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }

  build-latest-linux:
    runs-on: ubuntu-latest
    needs: create_release
    steps:
    - uses: actions/checkout@v4
    - name: Build in release mode
      run: cargo build --release
    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    - run: |
        gzip -kf ./target/release/integrity-checker
    - name: upload linux artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{needs.create_release.outputs.upload_url}} 
        asset_path: ./target/release/integrity-checker.gz
        asset_name: integrity-checker.linux-amd64.tar.gz
        asset_content_type: application/gzip

  build-latest-windows:
    runs-on: windows-latest
    needs: create_release
    steps:
    - uses: actions/checkout@v4
    - name: Build in release mode
      run: cargo build --release
    - run: |
        zip target/release/integrity-checker
    - name: upload windows artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{needs.create_release.outputs.upload_url}} 
        asset_path: ./target/release/integrity-checker.zip
        asset_name: integrity-checker.windows-amd64.tar.gz
        asset_content_type: application/gzip